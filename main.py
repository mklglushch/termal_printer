from flask import Flask, request, jsonify
import socket
import threading
import requests
import time

app = Flask(__name__)

TOKEN = '7956558016:AAHD-lrL5s5IHQ7X0u1zCZ2z0OmvkH8eDto'
TELEGRAM_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

#—Å—Ç–∞–≤–∏–º–æ –≤–µ–±—Ö—É–∫ –≤ —Ä–∞–∑—ñ –∑–∞–º—ñ–Ω–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ ngrok
def set_webhook():
    new_webhook_url = "https://6d897a75db67.ngrok-free.app/bot"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É
    response = requests.get(
        f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={new_webhook_url}"
    )
    print("Webhook setup result:", response.json())


#–¥–µ—à–∏—Ñ—Ä–∞—Ç–æ—Ä –∫–æ–¥—É
def decode_esc_pos(raw_data):
    result = []
    i = 0
    length = len(raw_data)

    while i < length:
        byte = raw_data[i]
        if byte == 0x1B and i + 1 < length:
            i += 2
            continue
        elif byte == 0x1D and i + 1 < length:
            i += 2
            continue
        elif byte == 0x0A:
            result.append('\n')
            i += 1
        elif byte == 0x0D:
            if i + 1 < length and raw_data[i + 1] == 0x0A:
                result.append('\n')
                i += 2
            else:
                result.append('\n')
                i += 1
        elif 0x20 <= byte <= 0xFF:
            try:
                result.append(raw_data[i:i + 1].decode('cp866'))
            except UnicodeDecodeError:
                result.append('?')
            i += 1
        else:
            i += 1
    return ''.join(result)



#—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def send_message(chat_id, text):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
    try:
        requests.post(TELEGRAM_URL, json={
            'chat_id': chat_id,
            'text': text,
        })
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
        
        
def send_last_recepient(chat_id, text):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
    try:
        requests.post(TELEGRAM_URL, json={
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        })
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")



#–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö –≤—ñ–¥ –ø—Ä–∏–Ω—Ç–µ—Ä—É
def handle_printer(conn):
    """–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
    full_text = []
    while True:
        data = conn.recv(2048)
        if not data:
            break
        full_text.append(decode_esc_pos(data))
    
    if full_text:
        check_text = ''.join(full_text)
        with open("printer_checks.txt", "w", encoding='utf-8') as f:
            f.write(check_text)
        
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        try:
            with open("subscribet_ID.txt", "r", encoding='utf-8') as f:# —Ç—É—Ç —Ç—Ä–µ–±–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–æ—Å—è –ª–∏—à–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
                for chat_id in f.read().splitlines():
                    if chat_id.strip():
                        send_last_recepient(chat_id.strip(), f"üñ® –ù–æ–≤–∏–π —á–µ–∫:\n\n```\n{check_text}\n```")
                        print("–Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ–∫")
        except FileNotFoundError:
            pass



#–°–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–π–æ–º—É –¥–∞–Ω–∏—Ö –∑ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
def printer_server():
    with socket.socket() as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind(('0.0.0.0', 9100))
        s.listen()
        print("–°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...")
        
        while True:
            try:
                conn, addr = s.accept()
                print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä: {addr[0]}")
                threading.Thread(target=handle_printer, args=(conn,)).start()
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    


#–Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —á–µ–∫—É —Ñ–∞–π–ª–æ–º
def send_recepient_file(chat_id, file_path):
    TELEGRAM_URL_DOC = f"https://api.telegram.org/bot{TOKEN}"
    with open(file_path, 'rb') as file:
            response = requests.post(
                f"{TELEGRAM_URL_DOC}/sendDocument",
                files={'document': file},
                data={'chat_id': chat_id}
            )
            return response.json()
        

def insub(chat_id, file_path):
    # –ó—á–∏—Ç—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –∑ —Ñ–∞–π–ª—É
    with open(file_path, 'r') as f:
        lines = f.readlines()

    # –í–∏–¥–∞–ª—è—î–º–æ chat_id, —è–∫—â–æ –≤—ñ–Ω —î –≤ —Å–ø–∏—Å–∫—É
    new_lines = [line for line in lines if line.strip() != str(chat_id)]

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ chat_id
    with open(file_path, 'w') as f:
        f.writelines(new_lines)

    
#–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
@app.route('/bot', methods=['POST'])
def bot():
    data = request.json
    message = data.get('message', {})
    chat_id = message.get('chat', {}).get('id')
    text = message.get('text', '').strip()

    if not chat_id:
        return jsonify({'ok': False})

    if text == "/start":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Ç–∞–∫–∏–π chat_id —É —Ñ–∞–π–ª—ñ
        already_subscribed = False
        try:
            with open("subscribet_ID.txt", "r", encoding='utf-8') as f:
                existing_ids = [line.strip() for line in f.readlines()]
                if str(chat_id) in existing_ids:
                    already_subscribed = True
        except FileNotFoundError:
            pass
        
        if not already_subscribed:
            with open("subscribet_ID.txt", "a", encoding='utf-8') as f:
                f.write(f"{chat_id}\n")
            send_message(chat_id, "‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–µ–∫—ñ–≤. \n/print - –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—Ä—É–∫–æ–≤–∞–Ω–∏–π —á–µ–∫ \n/file - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª —á–µ–∫—É \n/unsub - –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ –±–æ—Ç–∞")
        else:
            send_message(chat_id, "‚ÑπÔ∏è –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–µ–∫—ñ–≤.\n/print - –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—Ä—É–∫–æ–≤–∞–Ω–∏–π —á–µ–∫ \n/file - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª —á–µ–∫—É \n/unsub - –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ –±–æ—Ç–∞")
    #–¥—Ä—É–∫ —á–µ–∫—ñ–≤ –ø–æ –∫–æ–º–∞–Ω–¥—ñ
    elif text == "/print":
        try:
            with open("printer_checks.txt", "r", encoding='utf-8') as f:
                last_check = f.read()
            if last_check:
                send_last_recepient(chat_id, f"üñ® –û—Å—Ç–∞–Ω–Ω—ñ–π —á–µ–∫:\n\n```\n{last_check}\n```")
        except FileNotFoundError:
            send_message(chat_id, "–ß–µ–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î")
    #–¥—Ä—É–∫ —á–µ–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É
    elif text == "/file":
        file_path = "printer_checks.txt"  # –®–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É
        send_recepient_file(chat_id, file_path)
    elif text == "/unsub":
        insub(chat_id, "subscribet_ID.txt")
        send_message(chat_id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —á–µ–∫—ñ–≤, –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
    else:
        send_message(chat_id, "/start - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ \n/print - –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—Ä—É–∫–æ–≤–∞–Ω–∏–π —á–µ–∫ \n/file - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª —á–µ–∫—É \n/unsub - –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ –±–æ—Ç–∞")

    return jsonify({'ok': True})

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏...")
    set_webhook()  # –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ä—è–¥–æ–∫
    threading.Thread(target=printer_server, daemon=True).start()
    app.run(host='0.0.0.0', port=12345)
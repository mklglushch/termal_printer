from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from simple_func import check_subscribe, delete_user
router = Router()

#–∫–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def start(message:types.Message):
    user_id = message.from_user.id
    await message.answer(check_subscribe(user_id))
    
#–∫–æ–º–∞–Ω–¥–∞ /unsub    
@router.message(Command('unsub'))
async def unsub(message:types.Message):
    user_id = message.from_user.id
    delete_user(user_id, "subscribet_ID.txt")
    await message.answer( "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —á–µ–∫—ñ–≤, –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
    
#–∫–æ–º–∞–Ω–¥–∞ /file
@router.message(Command('file'))
async def get_file(message:types.Message):
    file_path = "printer_checks.txt"   # —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    try:
        await message.answer_document(types.FSInputFile(file_path))
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª: {e}")
        
#–∫–æ–º–∞–Ω–¥–∞ /print
@router.message(Command('print'))
async def get_file(message:types.Message):
    with open("printer_checks.txt", "r", encoding='utf-8') as f:
                last_check = f.read()
    await message.answer(f"üñ® –û—Å—Ç–∞–Ω–Ω—ñ–π —á–µ–∫:\n\n```\n{last_check}\n```", parse_mode="Markdown")




